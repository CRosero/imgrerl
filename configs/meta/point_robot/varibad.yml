seed: 73
cuda: 0 # use_gpu
env:
  env_type: meta
  env_name: PointRobotSparse-v0
  max_rollouts_per_task: 2 # k

  num_tasks: 100
  num_train_tasks: 80
  num_eval_tasks: 20

train:
  # sample complexity: BAMDP horizon * (num_init_rollouts_pool * num_train_tasks
  #  + num_iters * num_tasks_sample * num_rollouts_per_iter)
  # original 4k iters -> 12M steps
  # 1.5k iters -> 4.55M steps (17 gpu hrs, 31 cpu hrs)
  num_iters: 1500 # number meta-training iterates
  num_init_rollouts_pool: 400 # before training
  num_rollouts_per_iter: 25

  rl_updates_per_iter: 1000 
  vae_updates_per_iter: 25
  policy_batch_size: 3840 # 32*120
  vae_batch_num_rollouts: 32

  log_interval: 10 # num of iters
  save_interval: 100 # -1
  log_tensorboard: true

policy:
  buffer_size: 4e6 # or 1e6? old belief
  # bamdp related
  sample_embeddings: false # (otherwise: pass mean) obs_dim + 2*task_dim
  switch_to_belief_reward: null # when to switch from R to R+; None is to not switch

  policy: sac
  dqn_layers: [128, 128]
  policy_layers: [128, 128]
  lr: 0.00007
  # sac alpha
  entropy_alpha: 0.01 # tend to be det policy...
  automatic_entropy_tuning: true
  alpha_lr: 0.0003

  gamma: 0.9
  tau: 0.005
vae:
  buffer_size: 4e6 # or 1e6?
  task_embedding_size: 5 # dim of latent space
  
  optim:
    vae_lr: 0.001
    rew_loss_coeff: 1.0
    state_loss_coeff: 1.0 # (vs reward loss)
    kl_weight: 0.1
    kl_to_gauss_prior: false
    train_by_batch: true # false is by split

  # encoder
  encoder:
    aggregator_hidden_size: 128
    layers_before_aggregator: []
    layers_after_aggregator: []
    action_embedding_size: 0 # no action input
    state_embedding_size: 32
    reward_embedding_size: 8

  decoder:
    disable_stochasticity_in_latent: false
    # decoder: reward function r(s,m)
    decode_reward: true
    reward_decoder_layers: [64, 32]
    rew_pred_type: deterministic # gaussian, deterministic
    input_prev_state: false
    input_action: false
    # decoder: state transition p(s'|s,a,m)
    decode_state: false # not used
